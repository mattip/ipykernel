name: ipykernel tests

on: [push, pull_request]

jobs:
  build:
    runs-on: ${{ matrix.os }}-latest
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu, macos, windows]
        python-version: [ '3.7', '3.8', '3.9', 'pypy-3.7']
    steps:
    - name: Checkout
      uses: actions/checkout@v1
    - name: Install Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
        architecture: 'x64'
    - name: Upgrade packaging dependencies
      run: |
        pip install --upgrade pip setuptools wheel --user
    - name: Get pip cache dir
      id: pip-cache
      run: |
        echo "::set-output name=dir::$(pip cache dir)"
    - name: Cache pip
      uses: actions/cache@v1
      with:
        path: ${{ steps.pip-cache.outputs.dir }}
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('setup.py') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-
    - name: Install the Python dependencies
      run: |
        pip install --pre --upgrade --upgrade-strategy=eager .[test] codecov
    - name: Install matplotlib
      if: ${{ matrix.os != 'macos' && matrix.python-version != 'pypy3' }}
      run: |
        pip install matplotlib || echo 'failed to install matplolib'
    - name: Install alternate event loops
      if: ${{ matrix.os != 'windows' }}
      run: |
        pip install curio || echo 'ignoring curio install failure'
        pip install trio || echo 'ignoring trio install failure'
    - name: List installed packages
      run: |
        pip freeze
        pip check
    - name: Run the tests
      timeout-minutes: 10
      run: |
        pytest ipykernel -vv -s --cov ipykernel --cov-branch --cov-report term-missing:skip-covered --durations 10
    - name: Build the docs
      if: ${{ matrix.os == 'ubuntu' &&  matrix.python-version == '3.9'}}
      run: |
        cd docs
        pip install -r requirements.txt
        make html
    - name: Build and check the dist files
      run: |
        pip install build twine
        python -m build .
        twine check dist/*
    - name: Coverage
      run: |
        codecov
  check_docstrings:
    runs-on: ${{ matrix.os }}-latest
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu]
        python-version: [ '3.9' ]
        exclude:
        - os: windows
          python-version: pypy3
    steps:
    - name: Checkout
      uses: actions/checkout@v1
    - name: Install Python ${{ matrix.python-version }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}
        architecture: 'x64'
    - name: Upgrade packaging dependencies
      run: |
        pip install --upgrade pip setuptools wheel --user
    - name: Get pip cache dir
      id: pip-cache
      run: |
        echo "::set-output name=dir::$(pip cache dir)"
    - name: Cache pip
      uses: actions/cache@v1
      with:
        path: ${{ steps.pip-cache.outputs.dir }}
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('setup.py') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-
    - name: Install the Python dependencies
      run: |
        pip install --pre --upgrade --upgrade-strategy=eager .
        pip install velin
    - name: Check Docstrings
      run: |
        velin . --check --compact
